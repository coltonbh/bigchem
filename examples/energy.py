"""How to perform a basic, single program calculation using BigChem"""

from qcio import CalcType, Molecule, ProgramInput
from qcop import exceptions

from bigchem import compute

# Create the molecule
# Can also open a molecule from a file
# molecule = Molecule.open("path/to/h2o.xyz")
molecule = Molecule(
    symbols=["O", "H", "H"],
    geometry=[
        [0.0, 0.0, 0.0],
        [0.52421003, 1.68733646, 0.48074633],
        [1.14668581, -0.45032174, -1.35474466],
    ],
)

# Define the program input
prog_input = ProgramInput(
    molecule=molecule,
    calctype=CalcType.energy,  # May also use "energy", "gradient", "hessian"
    model={"method": "b3lyp", "basis": "6-31g"},
    keywords={},  # Optional: Additional keywords to pass to the QC program
)

# Submit computation to BigChem. Collect all files produced by the program
future_output = compute.delay("psi4", prog_input, collect_files=True)

# Check status (optional)
print(f"Calculation Status: {future_output.status}")

try:
    # Get result from BigChem
    output = future_output.get()
except exceptions.ExternalProgramError as e:
    prog_failure = e.program_failure  # ProgramFailure object
    prog_failure.traceback  # Full traceback of the error
    prog_failure.stdout  # Stdout from the program
    prog_failure.input_data  # Input data used to generate the calculation
    prog_failure.provenance  # Provenance of generated calculation
    # Do something with the error
    raise e  # Or re-raise the error if desired

# Remove result from backend
future_output.forget()

### Accessing results ###
# Stdout from the program
print(output.stdout)  # or output.pstdout for short
# Input data used to generate the calculation
print(output.input_data)
# Provenance of generated calculation
print(output.provenance)
# Files generated by the program
print(output.files.keys())

# Check results
print("Energy:", output.results.energy)
# The CalcType results will always be available at .return_result
print("Energy:", output.return_result)

print(output)

# Optionally write all files to disk for inspection
# output.save_files("where/to/save/files")
